/*	nodescape.h

	NodeScape is a generic tool for monitoring the status of
	a multitude of parameters for a multitude of objects...
	nominally, nodes of a cluster supercomputer.

	Status information is collected via straightforward UDP
	packets sent to nodescape. Each packet has a very simple
	format which can be generated by the epacsedon utility,
	so that any status daemon can easily create UDP packets.
	The communication is deliberately not closed loop; the
	nodes simply throw packets at the nodescape server. The
	unreliable delivery and packet order are dealt with by
	incorporating a timestamp and ignoring packets marked
	as older than the youngest one processed for that node.

	The nodescape server uses key and base image files to
	generate a separate display image for each status
	attribute. The files are:

	* The key image is expected to be a P5-format (binary
	  monochrome) image in which node 0 is black, node 1 is a
	  gray level of 1, etc. Background pixels should be white.

	* The base image is expected to be a P6-format (binary
	  red-green-blue) image with arbitrary content. The key
	  is used to determine where colors are overlayed in the
	  copy of the base image created for each attribute, but
	  the base image itself is never modified.

	* The display image for each attribute will be a file in
	  P6 format that is named after the attribute it displays.
	  This naming allows additional attributes to be added by
	  simply sending UDP messages with new attribute names.
	  The attribute files are created as copies of the base
	  image that are kept mapped into the nodescape server
	  and incrementally updated as each UDP packet comes in.
	  Any other program(s) can display the current status by
	  simply displaying the appropriate attribute image.
	  The color of a node is set to a shade of red to blue
	  depending on the relative value of that attribute...
	  unless no packets have been reported for too long, in
	  which case the color will change to magenta.

	April 2011 by Hank Dietz
*/

#include <arpa/inet.h>
#include <errno.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/time.h>
#include <unistd.h>

/*	The port number NodeScape listens to for UDP...
	needs to be something nothing else uses
*/
#define MYPORTNO 45243

/*	Status message stuff
*/

typedef struct {
	double		value;
	double		when;
} stat_t;

/*	Property name length set to fix packet length nicely... */
#define	PROPLEN		(32-(sizeof(stat_t)+sizeof(unsigned int)))

typedef struct {
	stat_t		status;
	unsigned int	node;		/* Who is this status of? */
	char		name[PROPLEN];	/* Property name string */
} mesg_t;

static inline double
dtime(void)
{
	/* Get as accurate a timestamp as possible...
	   fractional seconds since start of 1970
	*/
	struct timeval tv;

	gettimeofday(&tv, NULL);
	return(tv.tv_sec + (tv.tv_usec / 1000000.0));
}

int ns_1_send(mesg_t msg, char *ip, unsigned short port);
